/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package video;

import com.xuggle.xuggler.demos.VideoImage;
import java.awt.Color;
import java.awt.Point;
import java.beans.XMLDecoder;
import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author goryunov
 */
public class MainFrame extends javax.swing.JFrame {

    private Foo model = new Foo();
    private Hopfield net;
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        net = new Hopfield(10, 10);
        net.learn();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ButtonFileChooser = new javax.swing.JButton();
        ButtonStart = new javax.swing.JButton();
        loadingLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        panel = new video.VideoPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Видео в символы");

        ButtonFileChooser.setText("Выбрать файл");
        ButtonFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonFileChooserActionPerformed(evt);
            }
        });

        ButtonStart.setText("Запустить");
        ButtonStart.setEnabled(false);
        ButtonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonStartActionPerformed(evt);
            }
        });

        loadingLabel.setText(" ");

        jButton1.setText("Обычный просмотр");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        panel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 351, Short.MAX_VALUE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 132, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ButtonFileChooser)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ButtonStart))
                            .addComponent(loadingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonFileChooser)
                    .addComponent(ButtonStart)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loadingLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonFileChooserActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogType(JFileChooser.OPEN_DIALOG);
        //chooser.addChoosableFileFilter(new FileChooserFilter());
        chooser.setAcceptAllFileFilterUsed(true);
        chooser.setDialogTitle("Открыть ...");

        loadingLabel.setText("Проверка файла...");
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                model.fileChecker(chooser.getSelectedFile());
                this.repaint();
                loadingLabel.setText("Файл подходит для обработки");
                ButtonStart.setEnabled(true);
                /*FileInputStream fis;
                if (chooser.getSelectedFile().getName().toLowerCase().endsWith(".xml"))
                    fis = new FileInputStream(chooser.getSelectedFile().getPath());
                else fis = new FileInputStream(chooser.getSelectedFile().getPath()+".xml");

		BufferedInputStream bis = new BufferedInputStream(fis);
		XMLDecoder xmlDecoder = new XMLDecoder(bis);

                try {
                    Point mb1 = (Point)xmlDecoder.readObject();
                    redactorPanel.getModel().setStartPoint(mb1);
                    Point mb2 = (Point) xmlDecoder.readObject();
                    redactorPanel.getModel().setFinalPoint(mb2);
                    Integer mb3 = (Integer)xmlDecoder.readObject();
                    redactorPanel.getModel().setSelectedFigureIndex(mb3);
                    Color mb4 = (Color)xmlDecoder.readObject();
                    redactorPanel.getModel().setSelectedFigureColor(mb4);
                    ArrayList<ColouredFigure> mb5 = (ArrayList<ColouredFigure>) xmlDecoder.readObject();
                    redactorPanel.getModel().setColFigures(mb5);
                    Color mb6 = (Color) xmlDecoder.readObject();
                    redactorPanel.getModel().setNewFiguresColor(mb6);
                    xmlDecoder.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Ошибка при чтении файла!",
                        "Ошибка", JOptionPane.ERROR_MESSAGE);
                    return;
                } finally {
                    xmlDecoder.close();
                    //redactorPanel.repaint();
                }*/
            /*} catch (FileNotFoundException e) {
                JOptionPane.showMessageDialog(this, "Файл не найден!",
                    "Ошибка", JOptionPane.ERROR_MESSAGE);                
                return; 
            }*/
            } catch (Exception e) {
                loadingLabel.setText("Ошибка формата файла");
                ButtonStart.setEnabled(false);
                JOptionPane.showMessageDialog(this, e.getMessage(),
                    "Ошибка", JOptionPane.ERROR_MESSAGE); 
            } /*finally {
                loadingLabel.setText("Ошибка формата файла");
            }*/
        } else {
            //loadingLabel.setText("");
        }
    }//GEN-LAST:event_ButtonFileChooserActionPerformed

    private void ButtonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonStartActionPerformed
        try {
            model.process();
            loadingLabel.setText("Обработка файла завершена!");
        } catch (Exception e) {
                loadingLabel.setText("Обработка файла завершилась ошибкой");
                JOptionPane.showMessageDialog(this, e.getMessage(),
                    "Ошибка", JOptionPane.ERROR_MESSAGE);                
        }
    }//GEN-LAST:event_ButtonStartActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        /*try {
            model.simpleview(panel);
        } catch (Exception e) {
                loadingLabel.setText("Просмотр файла завершился ошибкой");
                JOptionPane.showMessageDialog(this, e.getMessage(),
                    "Ошибка", JOptionPane.ERROR_MESSAGE);                
        }*/
        openJavaWindow();
    }//GEN-LAST:event_jButton1ActionPerformed
  
    private static VideoImage mScreen = null;
    
    private static void openJavaWindow() {
        mScreen = new VideoImage();
    }
    
    /**
     * @param args the command line arguments
     */
    //public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         *//*
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
   /*     java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonFileChooser;
    private javax.swing.JButton ButtonStart;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel loadingLabel;
    private video.VideoPanel panel;
    // End of variables declaration//GEN-END:variables
}
